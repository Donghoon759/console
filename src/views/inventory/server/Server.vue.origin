
<script lang="ts">
/* eslint-disable camelcase */

import {
    ref, toRefs, computed, reactive,
} from '@vue/composition-api';
import _ from 'lodash';
import ServerTemplate, { serverSetup, eventNames } from '@/views/inventory/server/Server.template.vue';
import serverEventBus from '@/views/inventory/server/ServerEventBus';
import { mountBusEvent, tabIsShow } from '@/lib/compostion-util';
import {
  defaultAutocompleteHandler,
  getEnumValues, getFetchValues, makeValuesFetchHandler,
} from '@/components/organisms/search/query-search-bar/autocompleteHandler'
import { getAllPage } from '@/components/organisms/pagenations/toolset';
import { defaultQuery } from '@/lib/api/query';
import { AdminTableAPI, HistoryAPI, QuerySearchTableFluentAPI } from '@/lib/api/table'
import { ChangeServerProject } from '@/lib/api/fetch';
import { useStore } from '@/store/toolset';
import fluentApi from '@/lib/fluent-api';
import { QSTableACHandlerArgs, QuerySearchTableACHandler } from '@/lib/api/auto-complete'

export default {
    name: 'Server',
    extends: ServerTemplate,
    setup(props, context) {


        const serverEventNames = eventNames;
        serverEventNames.getServerList = 'getServerData';
        serverEventNames.tagConfirmEvent = 'ServerTagConfirmEvent';
        serverEventNames.tagResetEvent = 'resetTagEvent';
        serverEventNames.getServerAdmin = 'requestAdmin';

        serverEventNames.inServiceServer = 'inServiceServer';
        serverEventNames.maintenanceServer = 'maintenanceServer';
        serverEventNames.closedServer = 'closedServer';
        serverEventNames.deleteServer = 'deleteServer';



        const state = serverSetup(
            props,
            context,
            serverEventNames,
            apiHandler,
            new ChangeServerProject(),
        );
        const projectStore = context.parent.$ls.project;

        projectStore.getProject();
        const matchProject = (items) => {
            const result = items.map((item) => {
                try {
                    item.project = item.project_id ? projectStore.state.projects[item.project_id] || item.project_id : '';
                } catch (e) {
                    item.project = item.project_id;
                }
                return item;
            });
            return result;
        };


        const numberTypeKeys = new Set(['data.base.memory', 'data.base.core']);
        // const valueFormatter = (key, value) => {
        //     if (numberTypeKeys.has(key)) {
        //         try {
        //             return Number(value);
        //         } catch (e) {
        //             return value;
        //         }
        //     }
        //     return value;
        // };



        // change tag
        const ServerTagConfirm = async (serverId:string, tags:any, originTags) => {
            const idx = apiHandler.tableTS.syncState.selectIndex[0]
            try {
                const res = await context.parent.$http.post('/inventory/server/update', {
                    server_id: serverId,
                    tags,
                });
                (apiHandler.tableTS.state.items as any[])[idx].tags = tags;
            } catch (e) {
                serverEventBus.$emit(serverEventNames.tagResetEvent);
                (apiHandler.tableTS.state.items as any[])[idx].tags = originTags;
                console.error(e);
            }
        };
        mountBusEvent(serverEventBus, serverEventNames.tagConfirmEvent, ServerTagConfirm);








        return {
            ...toRefs(state),

        };
    },
};
</script>
